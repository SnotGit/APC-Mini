# PROMPT 4 - WORKFLOW (M√©thode de travail)

## üìö PHASE DE RECHERCHE PR√âLIMINAIRE

### √âtape 1 : Documentation Ableton Live
- **Lire** et analyser le manuel d'Ableton Live 11
- **√âtudier** Control Surface Scripts : https://help.ableton.com/hc/en-us/articles/206240184-Creating-your-own-Control-Surface-script
- **Extraire** toutes les propri√©t√©s des canaux MIDI
- **Identifier** les sp√©cifications techniques n√©cessaires pour l'int√©gration
- **Comprendre** le syst√®me de mapping et de communication MIDI

### √âtape 2 : Recherche mat√©riel Akai APC Mini MK1
- **Documenter** exhaustivement les notes MIDI et messages CC (Control Change)
- **Mapper** la disposition physique des pads, boutons et contr√¥leurs
- **Identifier** les plages de valeurs et comportements MIDI
- **Noter** les sp√©cificit√©s LED (tri-color : off, amber, green, red)
- **Comprendre** la logique de communication USB/MIDI

### √âtape 3 : Recherche Novation Circuit
- **Analyser** le fonctionnement du s√©quenceur int√©gr√©
- **Documenter** le syst√®me de gammes (scales) disponibles
- **Comprendre** l'architecture de contr√¥le MIDI
- **Identifier** les patterns d'interaction utilisateur
- **Extraire** la logique de s√©quen√ßage √† reproduire

### Validation recherche
- **Pr√©senter** les informations collect√©es
- **Confirmer** la compr√©hension technique
- **Valider** les sp√©cifications avant d√©veloppement

## üîÑ M√âTHODE DE LIVRAISON OBLIGATOIRE

### Principe de livraison s√©quentielle
- **UN FICHIER COMPLET** par artefact (HTML, CSS, JS)
- **UN MESSAGE** par fichier pour permettre r√©vision et discussion
- **ATTENDRE VALIDATION** obligatoire avant de passer au fichier suivant
- **PERMETTRE** modifications et ajustements sur chaque fichier propos√©

### Workflow de validation
1. **Proposer** un fichier complet et fonctionnel
2. **Expliquer** les choix techniques effectu√©s
3. **Attendre** retours et validation utilisateur
4. **Ajuster** selon les demandes de modification
5. **Confirmer** la validation avant fichier suivant

### Gestion des modifications
- **Accepter** tous les retours sans discussion
- **Appliquer** les modifications demand√©es fid√®lement
- **Relivrer** le fichier corrig√© pour nouvelle validation
- **It√©rer** jusqu'√† satisfaction compl√®te

## ‚öñÔ∏è PROCESSUS DE VALIDATION STRICT

### R√®gles de validation absolues
- **ACCORD PR√âALABLE OBLIGATOIRE** avant toute action sur le code
- **DEMANDER CONFIRMATION** pour tout √©l√©ment ambigu ou manquant
- **POSER DES QUESTIONS** syst√©matiquement plut√¥t que d'assumer
- **ATTENDRE** r√©ponse explicite avant de proc√©der

### Types de validation requis
**Validation architecturale :**
- Structure g√©n√©rale de l'application
- Organisation des fichiers et modules
- Choix techniques et patterns utilis√©s

**Validation fonctionnelle :**
- Comportement des √©l√©ments interactifs
- Logique m√©tier et algorithmes
- Int√©gration des fonctionnalit√©s

**Validation visuelle :**
- Rendu final des interfaces
- Respect des designs et croquis
- Coh√©rence visuelle globale

## üíª STANDARDS DE CODE SP√âCIFIQUES

### Qualit√© senior obligatoire
**Lisibilit√© :**
- **Noms explicites** : variables, fonctions, classes compr√©hensibles
- **Structure claire** : indentation, organisation logique
- **Code auto-document√©** : logique √©vidente sans commentaires excessifs

**Modularit√© :**
- **S√©paration responsabilit√©s** : chaque fonction/module a un r√¥le pr√©cis
- **R√©utilisabilit√©** : composants r√©utilisables sans duplication
- **Extensibilit√©** : facilit√© d'ajout de nouvelles fonctionnalit√©s

**Robustesse :**
- **Gestion d'erreurs** : try/catch appropri√©s, validation inputs
- **Edge cases** : cas limites anticip√©s et g√©r√©s
- **Code d√©fensif** : v√©rifications n√©cessaires sans paranoia

### Standards de logging sp√©cifiques
**AUTORISER UNIQUEMENT :**
- **Erreurs importantes** : bugs, √©checs de communication MIDI, probl√®mes critiques
- **Assignations de pads** : logs d√©coratifs pour visualiser les mappings (ex: "Pad 1 ‚Üí C3")
- **Logs d'export** : confirmation de g√©n√©ration/sauvegarde (ex: "Configuration export√©e")

**INTERDIRE FORMELLEMENT :**
- Logs informatifs superflus ("module charg√©", "initialisation termin√©e")
- Logs de debug oubli√©s ("valeur = X", "entr√©e dans fonction Y")
- Logs redondants ou trop verbeux

### Pr√©sentation du code
**Standards visuels :**
- **S√©parateurs de sections** : commentaires clairs d√©limitant les blocs logiques
- **INTERDICTION d'ic√¥nes** : pas de symb√¥les emoji ou caract√®res sp√©ciaux
- **Commentaires minimalistes** : uniquement pour la logique complexe non √©vidente
- **Indentation coh√©rente** : 2 ou 4 espaces, consistent dans tout le projet

## üéØ WORKFLOW CLAUDE PROJECTS

### Conversations optimis√©es
**Phase d'analyse :**
*"Analyse le repository et pr√©sente-moi ton extraction du design + plan de refactorisation + recherche technique"*

**Phase de d√©veloppement :**
*"Cr√©e le fichier [nom] refactoris√© reproduisant l'apparence exacte avec mes nommages"*

**Phase d'ajustement :**
*"Modifie [√©l√©ment] selon mes retours en conservant l'architecture visuelle"*

### Progression structur√©e
1. **Analyse compl√®te** ‚Üí validation
2. **Architecture propos√©e** ‚Üí validation
3. **Fichier HTML principal** ‚Üí validation
4. **Fichier CSS principal** ‚Üí validation
5. **Fichier JavaScript principal** ‚Üí validation
6. **Fichiers additionnels** ‚Üí validation individuelle
7. **Tests et corrections finales**

### Communication efficace
- **Messages courts** : profiter du contexte permanent du projet
- **Focus action** : chaque conversation a un objectif pr√©cis
- **Feedback rapide** : validation/correction sans re-explication du contexte
- **It√©ration fluide** : am√©lioration continue sans perte de temps

## üìã LIVRABLES WORKFLOW

### Documentation de progression
- **Checklist** des fichiers cr√©√©s et valid√©s
- **Historique simple** des modifications demand√©es et appliqu√©es
- **√âtat d'avancement** : quelles √©tapes restent √† compl√©ter

### Qualit√© finale
- **Code test√©** : fonctionnalit√©s v√©rifi√©es
- **Design conforme** : apparence identique √† la r√©f√©rence
- **Performance optimis√©e** : chargement rapide, interactions fluides
- **Documentation** : README et commentaires essentiels

## ‚úÖ OBJECTIF WORKFLOW

**R√âSULTAT ATTENDU :**
- **D√©veloppement fluide** sans blocages ni malentendus
- **Qualit√© constante** gr√¢ce aux validations syst√©matiques
- **Respect total** des attentes utilisateur
- **Base √©volutive** pour d√©veloppements futurs
- **Collaboration efficace** maximisant la productivit√©

**PRINCIPE :** Validation continue, communication claire, livraison s√©quentielle, qualit√© senior sans compromis.